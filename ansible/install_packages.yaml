---
- name: Install packages
  hosts: local
  tags: prereqs
  vars_files:
  - properties.yaml
  
  tasks:
  - name: Create groups
    ansible.builtin.group:
      name: "{{ name }}"
      system: "{{ system | default('false') | bool }}"
    loop: "{{ archlinux.groups }}"

  - name: Create users
    ansible.builtin.user:
    loop: "{{ archlinux.users }}"

  - name: Create directories
    ansible.builtin.file:
      path: "{{ path }}"
      state: "{{ state | default('directory') }}"
      mode: "{{ mode | default('0660') }}"
      owner: "{{ owner }}"
      group: "{{ group }}"
    loop: "{{ archlinux.directories }}"

  - name: Install packages for "Archlinux"
    block:

    - name: Enable multilib repository in pacman.conf
      lineinfile:
        path: /etc/pacman.conf
        state: present
        regexp: '^#\[multilib\]'
        line: '[multilib]'

    - name: Enable multilib include line in pacman.conf
      lineinfile:
        path: /etc/pacman.conf
        state: present
        regexp: '^#Include = /etc/pacman.d/mirrorlist'
        line: 'Include = /etc/pacman.d/mirrorlist'

    - name: Update and upgrade
      community.general.pacman:
        update_cache: true
        upgrade: true

    - name: "Pacman: Install packages"
      community.general.pacman:
        name: "{{ item.name }}"
        state: "{{ item.state | default('latest') }}"
      loop: "{{ archlinux.packages.pacman }}"

    - name: Install yay
      ansible.builtin.include_tasks: subtasks/yay_install.yaml

    - name: Update and upgrade yay
      community.general.pacman:
        update_cache: true
        upgrade: true
        executable: yay
        # extra_args: --builddir /var/cache/yay

    - name: "Yay: Install packages"
      community.general.pacman:
        name: "{{ item.name }}"
        state: "{{ item.state | default('latest') }}"
        executable: yay
        # extra_args: --builddir /var/cache/yay
      loop: "{{ archlinux.packages.yay }}"

    - name: Enable services
      ansible.builtin.systemd_service:
        name: "{{ item.name }}"
        state: "{{ item.state | default('started') }}"
        enabled: "{{ item.state | default('true') | bool}}"
      loop: "{{ archlinux.services }}"

    - name: Init starship
      ansible.builtin.lineinfile:
        path: ~/.bashrc
        regexp: '^eval "\$\(starship init bash\)"'
        line: eval "$(starship init bash)"
      become: false

    become: yes
    become_user: root
    when: ansible_os_family == "Archlinux"